{{ $root := dict
    "title" "Docs"
    "description" "Documentation for your favorite fox API"
-}}
{{- tpl ( file.Read "templates/start.html.tmpl" ) $root }}
    <h1 class="section">Docs</h1>
    <div class="fold-container">
        <section class="fold">
            <input type="checkbox" name="collapse" id="foldable-libraries">
            <h2>
                <label for="foldable-libraries">Libraries</label>
            </h2>
            <div class="fold-container">
                <section class="fold">
                    <input type="checkbox" name="collapse" id="foldable-libraries-javascript">
                    <h2>
                        <label for="foldable-libraries-javascript">Javascript (Web)</label>
                    </h2>
                    <div>
                        <p>
                            To enable the API for the web is pretty simple. You
                            can either download <a
                            href="https://github.com/Foxes-cool/Foxes-Javascript/blob/main/dist/foxes.min.js">
                            https://github.com/Foxes-cool/Foxes-Javascript/blob/main/dist/foxes.min.js
                            </a>, or you can enable the API by adding this to
                            your header section
                            <br>
                            <code>
                            &lt;script src="https://cdn.jsdelivr.net/gh/Foxes-cool/Foxes-Javascript/dist/foxes.min.js"&gt;&lt;/script&gt;
                            </code>
                        </p>
                        <p>
                            Once you have enabled the library you will have
                            access to all of the tags without doing any of the
                            manual work. You can use them by for example doing
                            <code>foxes.fox()</code>, it will return something
                            like <code>https://img.foxes.cool/fox/0.jpg</code>.
                            The syntax is <code>foxes.{tag}()</code>, to find
                            the tags just scroll down and you will see them. Do
                            note that in the javascript library all the names
                            start with a lowercase.
                        </p>
                        <p>
                            You can have do some realtime image manipulation by
                            adding an options as the first parameter to the
                            function. An example would be like
                            <code>foxes.fox({width: 150})</code>, this will
                            generate a random image that has a max width of
                            150px. You can string multiple of them by doing
                            <code>foxes.fox({width: 150, height: 150})</code>,
                            this will get a random image that has a max width
                            of 150px and max height of 150px. Note this will
                            preserve aspect ratio so it is very likly that
                            either width or height will be 150px but not both.
                        </p>
                        <p>
                            The main configuration has the following parameters
                            <ul>
                                <li><code>width</code> - This is the <b>max</b>
                                width for the image. You will set this by just
                                setting it to a number. Example: <code>width:
                                150</code></li>
                                <li><code>height</code> - This is the exact
                                same as width but for height. Example:
                                <code>height: 150</code></li>
                                <li><code>aspect_ratio</code> - This will set
                                the aspect ratio. The value that is expected is
                                a string in the format of <code>{width}:{height}
                                </code>. Do note that this does not stretch the
                                image and will crop the image to make it fit the
                                desired aspect ratio. Example:
                                <code>aspect_ratio: "16:9"</code></li>
                            </ul>
                        </p>
                    </div>
                </section>
                <!--
                <hr>
                <section class="fold">
                    <input type="checkbox" name="collapse" id="foldable-libraries-node">
                    <h2>
                        <label for="foldable-libraries-node">Node.js</label>
                    </h2>
                    <div>
                    </div>
                </section>
                -->
            </div>
        </section>
        <hr>
        <section class="fold">
            <input type="checkbox" name="collapse" id="foldable-manual">
            <h2>
                <label for="foldable-manual">Manual</label>
            </h2>
            <div>
                <p>
                    Foxes.cool, works a little differently than what you are
                    probably used to. You are probably used to having a rest
                    API where you make a request to an endpoint and it returns
                    a URL. This is both inefficient, but also demanding on the
                    servers. If you want to access a random image, you are
                    going to have to generate the image id yourself. This is
                    not as complicated as it seams though!
                <p>
                <p>
                    You are first going to want to know how many images there
                    are for a certain tag. This can be achieved by making a
                    request to <code>https://foxes.cool/counts/{}</code>,
                    replacing <code>{}</code>, with your tag. For instance
                    <code>https://foxes.cool/counts/fox</code> returns
                    <code>{{ tpl ( file.Read "src/counts/fox" ) }}</code>. This
                    number you can cache for any amount of time you want. I
                    would cache this number until midnight UTC. There are also
                    times where images are going to be removed because someone
                    has made a valid removal. If this happens we will try and
                    find a backup image to replace the id, so the images you
                    know will always be the same id. If we are going to loose
                    an image and don't find a backup we are going to update the
                    count as soon as we can, but we will remove our image ~5
                    minuets after UTC midnight to give you time to update to
                    the new count.
                </p>
                <p>
                    Now we have the fun part, actually generating the image
                    URLs. The simplest way to get an id is by doing this
                    calculation <code>floor(Random*count)</code> or
                    <code>floor(Random(0, count))</code>. For the first example
                    this is assuming <code>Random</code> is a random float
                    between 0 and 1. For the second example the
                    <code>Random</code> function is assumed to be an exclusive
                    random, meaning <code>count</code> wont ever be a
                    possibility. Once you have gotten the random id, to get the
                    image URL is pretty simple, you just do
                    <code>https://img.foxes.cool/{tag}/{id}.jpg</code>. In this
                    example <code>{}</code> is made to signify a variable. Do
                    note that your id needs to be calculated the way above and
                    you wont necessarily be able to transfer this id to another
                    tag. You will need to probably generate a new id for a
                    different tag.
                </p>
                <p>
                    There is support for realtime image manipulation. These can
                    be controlled by url parameters like <code>width</code>,
                    <code>height</code>, and <code>aspect_ratio</code>. An
                    example url would be
                    <code>https://img.foxes.cool/fox/0.jpg?width=150&height=150</code>
                    , this would set the max width and height to be 150px. Width
                    and height is going to be the <b>max</b> a image can be,
                    while preserving aspect ratio. The <code>aspect_ratio</code>
                    parameter is controlled in the format of <code>
                    {width}:{height}</code>. Do note that <code>aspect_ratio
                    </code>, will crop the image to be the desired aspect ratio
                    and will not stretch the image.
                </p>
            </div>
        </section>
    </div>
    <h2 class="section">Tags</h2>
    <div class="card-container">
        <div class="card">
            <h3 class="card-title">Fox</h3>
            <code>{{ tpl ( file.Read "src/counts/fox" ) }}</code> images
        </div>
        <div class="card">
            <h3 class="card-title">Curious</h3>
            <code>{{ tpl ( file.Read "src/counts/curious" ) }}</code> images
        </div>
        <div class="card">
            <h3 class="card-title">Happy</h3>
            <code>{{ tpl ( file.Read "src/counts/happy" ) }}</code> images
        </div>
        <div class="card">
            <h3 class="card-title">Scary</h3>
            <code>{{ tpl ( file.Read "src/counts/scary" ) }}</code> images
        </div>
        <div class="card">
            <h3 class="card-title">Sleeping</h3>
            <code>{{ tpl ( file.Read "src/counts/sleeping" ) }}</code> images
        </div>
    </div>
{{ file.Read "templates/end.html.tmpl" -}}
